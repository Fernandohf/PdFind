#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Sun Aug  2 14:22:59 2020
#
import wx
import os
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from pdfind import Converter
# end wxGlade


class Frame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.paths = []
        self.currentDirectory = os.getcwd()
        # begin wxGlade: Frame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 180))
        self.frame_statusbar = self.CreateStatusBar(1)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.main_pane = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.text_ctrl_inputfile = wx.TextCtrl(
            self.main_pane, wx.ID_ANY, "Caminho do arquivo", style=wx.TE_PROCESS_ENTER | wx.TE_READONLY)
        self.button_inputfile = wx.Button(
            self.main_pane, wx.ID_ANY, "Abrir arquivo")
        self.run_button = wx.Button(
            self.main_pane, wx.ID_ANY, "Processar arquivos")
        self.progress_bar = wx.ProgressWidget(self.main_pane, wx.ID_ANY)
        self.settings_pane = wx.Panel(self.notebook_1, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.openFile, self.button_inputfile)
        self.Bind(wx.EVT_BUTTON, self.runConverter, self.run_button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Frame.__set_properties
        self.SetTitle("PdFind")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap(
            "D:\\ARQUIVOS PESSOAIS\\GitHub\\PdFind\\ui\\search.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.frame_statusbar.SetStatusWidths([-1])

        # statusbar fields
        frame_statusbar_fields = ["Parado"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.run_button.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Frame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(
            self.main_pane, wx.ID_ANY, "Selecione o arquivo"), wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.text_ctrl_inputfile, 10, wx.ALL |
                    wx.EXPAND | wx.FIXED_MINSIZE, 5)
        sizer_3.Add(self.button_inputfile, 1,
                    wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.FIXED_MINSIZE, 5)
        sizer_4.Add(sizer_3, 0, 0, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_5.Add(self.run_button, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(self.progress_bar, 10, wx.ALL | wx.EXPAND, 7)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
        self.main_pane.SetSizer(sizer_2)
        self.notebook_1.AddPage(self.main_pane, "Aplicativo")
        self.notebook_1.AddPage(self.settings_pane, u"Config")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def openFile(self, event):  # wxGlade: Frame.<event_handler>
        """
        Create and show the Open FileDialog
        """
        wildcard = "Arquivo PDF (*.pdf)|*.pdf|" \
            "All files (*.*)|*.*"
        dlg = wx.FileDialog(
            self, message="Escolha um arquivo",
            defaultDir=self.currentDirectory,
            defaultFile="",
            wildcard=wildcard,
            style=wx.FD_OPEN
        )
        if dlg.ShowModal() == wx.ID_OK:
            self.paths = dlg.GetPaths()
            # self.text_ctrl_inputfile.value = ",".join(self.paths)
            self.text_ctrl_inputfile.SetValue(";".join(self.paths))
            self.run_button.Enable(True)
        dlg.Destroy()

    def runConverter(self, event):  # wxGlade: Frame.<event_handler>
        """
        Run the converter on the input files
        """
        button = event.GetEventObject()
        button.Disable()

        # check if files were processed
        if len(self.paths) == 0:
            wx.MessageBox('Escolha um arquivo antes',
                          'Aviso', wx.OK | wx.ICON_WARNING)
            event.Skip()
        else:
            for path in self.paths:
                converter = Converter(path)

                # Extract images
                self.frame_statusbar.SetStatusText("Extraindo images...", 0)
                self.progress_bar.Pulse()
                n_imgs = converter.extract_images()

                # Process images
                self.frame_statusbar.SetStatusText("Processando images...", 0)
                p_val = 0
                self.progress_bar.SetRange(n_imgs)
                for img in converter.images:
                    converter.perform_ocr(img)
                    p_val += 1
                    self.progress_bar.SetValue(p_val)

                # Merging files
                self.frame_statusbar.SetStatusText(
                    "Criando arquivo final...", 0)
                self.progress_bar.Pulse()
                converter.create_output_file()

                # done
                self.progress_bar.SetRange(100)
                self.progress_bar.SetValue(100)
                self.frame_statusbar.SetStatusText("Pronto", 0)

        button.Enable()

# end of class Frame


class MyApp(wx.App):
    def OnInit(self):
        self.frame = Frame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp


class ProgressWidget(wx.Gauge):
    def __init__(self, *args):
        super().__init__(*args, range=10, style=wx.GA_HORIZONTAL)


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
